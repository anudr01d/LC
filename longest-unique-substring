
import java.io.*;
import java.util.*;


class Solution {
  public static void main(String[] args) {
    String s = "abababcde";
    System.out.println(longestUniqueSub(s));
  }
  
  public static String longestUniqueSub(String s) {
    StringBuffer substr = new StringBuffer();
    String maxStr = "";
    for(int i=0; i<s.length(); i++) {
      for(int j=i; j<s.length(); j++) {
        
        if((j+1) <= s.length()-1 
           && s.charAt(j)!=s.charAt(j+1) 
           && !substr.toString().contains(String.valueOf(s.charAt(j)))) {
            substr.append(s.charAt(j));
        
          if((j+1) == s.length()-1 
             && !substr.toString().contains(String.valueOf(s.charAt(j+1)))) {
            substr.append(s.charAt(j+1));
          }
            //System.out.println("SUBSTR : " + substr);

          if(substr.toString().length() > maxStr.length()) {
            maxStr = substr.toString();
            //System.out.println("MAXSTR : " + maxStr);
          }
        }
        else {
            substr = new StringBuffer();
          break;
        }  
      }
        
    }    
    
    return maxStr;
  }
  
  //Approach 2
  public static String longestUniqueSub2(String s) {
    String result = "";
    char c[] = s.toCharArray();
    for(int i =0; i< c.length-1; i++) {
      Set<Character> set = new HashSet<>();
      set.add(c[i]);
      int j = i+1;
      while(j<c.length-1) {
        if(!set.add(c[j])) {
          break;
        }
        j++;
      }
      result = (result.length() > (s.substring(i,j)).length())  ? result : s.substring(i,j);
    }
    return result;
  }
  
}
